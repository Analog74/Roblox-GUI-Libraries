#!/usr/bin/env node
/*
 Auto NOTICE generator
 Scans known library mappings plus vendor/ cloned repos and attempts to detect license types.
 Outputs AUTO_NOTICE.md (do not edit manually) with a table of aggregated libraries.

 Extend the LIB_MAPPINGS array to add more libraries or override detection.
 Detection order for license type:
 1. Explicit mapping.license
 2. First line (or SPDX line) of LICENSE* file in candidate paths.
 3. Fallback 'UNKNOWN'.
*/

const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();
const VENDOR_DIR = path.join(ROOT, 'vendor');
const PACKAGES_DIR = path.join(ROOT, 'Packages');
const OUTPUT = path.join(ROOT, 'AUTO_NOTICE.md');

// Canonical library metadata. Add/modify as needed.
const LIB_MAPPINGS = [
  { name: 'Fusion', repo: 'https://github.com/Elttob/Fusion' },
  { name: 'Roact', repo: 'https://github.com/Roblox/roact' },
  { name: 'Aegis', repo: 'https://github.com/lumin-dev/aegis' },
  { name: 'Knit', repo: 'https://github.com/Sleitnick/Knit' },
  { name: 'Cmdr', repo: 'https://github.com/evaera/Cmdr', realm: 'server' },
  { name: 'Rex', repo: 'https://github.com/boatbomber/Rex' },
  { name: 'Nevermore Engine', repo: 'https://github.com/Quenty/NevermoreEngine' },
  { name: 'Rbx Gui Library', repo: 'https://github.com/csqrl/Rbx-Gui-Library' },
  { name: 'Screen3D', repo: 'https://github.com/Fraktality/Screen3D' },
  { name: 'Aero Game Framework', repo: 'https://github.com/Sleitnick/AeroGameFramework' },
  { name: 'Valkyrie', repo: 'https://github.com/Thomas-Smyth/Valkyrie', optional: true },
  { name: 'roblox-ts (tool)', repo: 'https://github.com/roblox-ts/roblox-ts' },
];

function readFirstLine(p) {
  try {
    const data = fs.readFileSync(p, 'utf8');
    const line = data.split(/\r?\n/).find(l => l.trim().length > 0) || '';
    return line.trim();
  } catch (_) { return ''; }
}

function detectLicenseText(dir) {
  if (!dir || !fs.existsSync(dir)) return '';
  const entries = fs.readdirSync(dir);
  const lic = entries.find(e => /^license(?:\.|$)/i.test(e));
  if (lic) {
    const p = path.join(dir, lic);
    return readFirstLine(p);
  }
  return '';
}

function classifyLicense(firstLine) {
  const line = firstLine.toLowerCase();
  if (!line) return '';
  if (line.includes('mit')) return 'MIT';
  if (line.includes('apache')) return 'Apache-2.0';
  if (line.includes('bsd 2') || line.includes('bsd-2')) return 'BSD-2-Clause';
  if (line.includes('bsd 3') || line.includes('bsd-3')) return 'BSD-3-Clause';
  if (line.includes('mozilla') || line.includes('mpl')) return 'MPL-2.0';
  if (line.includes('gnu general public license') || line.includes(' gpl')) return 'GPL';
  if (line.includes('lgpl')) return 'LGPL';
  if (line.includes('unlicense')) return 'Unlicense';
  if (line.includes('isc license')) return 'ISC';
  return '';
}

function findDirUnder(base, name) {
  if (!fs.existsSync(base)) return undefined;
  const dirs = fs.readdirSync(base).filter(d => {
    try { return fs.statSync(path.join(base, d)).isDirectory(); } catch { return false; }
  });
  const normName = name.toLowerCase().replace(/[^a-z0-9]/g, '');
  return dirs.find(d => d.toLowerCase().replace(/[^a-z0-9]/g, '').includes(normName));
}

function enrich(lib) {
  const vendorMatch = findDirUnder(VENDOR_DIR, lib.name);
  const packageMatch = findDirUnder(PACKAGES_DIR, lib.name);
  let licenseType = lib.license || '';
  let firstLine = '';
  const candidates = [];
  if (vendorMatch) candidates.push(path.join(VENDOR_DIR, vendorMatch));
  if (packageMatch) candidates.push(path.join(PACKAGES_DIR, packageMatch));
  for (const dir of candidates) {
    if (licenseType) break;
    firstLine = detectLicenseText(dir);
    if (firstLine) licenseType = classifyLicense(firstLine) || licenseType;
  }
  if (!licenseType) licenseType = 'UNKNOWN';
  return { ...lib, vendorDir: vendorMatch, packageDir: packageMatch, license: licenseType };
}

const rows = LIB_MAPPINGS.map(enrich);

// Build markdown
const now = new Date();
const header = `# AUTO GENERATED NOTICE\n\nThis file was generated by scripts/gen-notice.cjs on ${now.toISOString()} UTC.\nDo not edit manually. Update mappings or upstream clones then re-run:\n\n    npm run gen-notice\n\nSee MANUAL notice in NOTICE.md for human-curated context and instructions.\n`;

const tableHead = '\n| Library | Upstream URL | License | Vendor | Package | Optional |\n|---------|--------------|---------|--------|---------|----------|';
const tableBody = rows.map(r => `| ${r.name} | ${r.repo} | ${r.license} | ${r.vendorDir || ''} | ${r.packageDir || ''} | ${r.optional ? 'yes' : ''} |`).join('\n');

const advisory = `\n\nLicense detection is heuristic (first line of LICENSE). Verify non-MIT entries manually.\n`;

fs.writeFileSync(OUTPUT, header + tableHead + '\n' + tableBody + advisory, 'utf8');

console.log(`Wrote ${OUTPUT} with ${rows.length} entries.`);
